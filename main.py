from indiceCoincidencia import *
from kasiski import *


#cadenaOriginal = "HACETREINTAMILLONESDEAÑOSCAYOUNMETEORITODEDOSKILOMETROSDEDIAMETROENLASSABANASDELVICHADAUNAREGIONALORIENTEDECOLOMBIAELIMPACTOGENEROUNENORMECRATERENELQUEPOCOAPOCOFUECRECIENDOUNASELVAQUEHOYENDAAESELHOGARDENOVENTAFAMILIASINDIGENASDELATRIBUSEMINOMADASIKUANIYALBERGAALMENOSMILQUINIENTASESPECIESDEANIMALESYCERCADEMILCIENESPECIESDEPLANTASSEGUNESTUDIOSDELINSTITUTOHUMBOLDTELCENTRODEINVESTIGACIONENBIODIVERSIDADYECOSISTEMASMASIMPORTANTEDELCOLOMBIALUISSANTIAGOCASTILLOBIOLOGODELINSTITUTOYLIDERDELPROYECTOQUEBUSCAESTUDIARYPROTEGERLACULTURAYLANATURALEZADELAZONACUENTAPORTELEFONOQUEELANTIGUOAGUJEROCAUSADOPORUNCUERPOCELESTEMIDECINCUENTAKILOMETROSDEDIAMETROYCOMBINALAFAUNAYLAFLORADELASSABANASCONLASESPECIESYLAVEGETACIONDELOSBOSQUESTROPICALESDELAMAZONASLASELVADEALIWACOMOLALLAMANLOSINDIGENASCONTIENEBIODIVERSIDADTIPICADELOSDOSECOSISTEMASESTECRATERESLABISAGRAENTREELLLANOYLASELVADICECASTILLO"

#cadena = "WAOTTETIZJAYXLXENQIDQPÑBICNÑOHCMQJEBHIGEDQSOFZIXEMQJRBIDQSINBEGHOQCLNISNQAZPSPTLIXCTPDNKNNHESXOZPLBHIQCTQSEOELBBBUPEXXMCPCGEGQCEEEUZTNBHMQRRNJEETNQAQHTPBRONFOOEFHTCETCUTNPEUZPSQAVNGUQWOLTNPPAQIEXWOSPRPTNBLEZJARPMUAINIIZSISTNNIDQAAGHIÑKSQBIZEMNSAFXKHPNUÑAXQEEVANAMQCOFBIXGUUCIQCTNIEFFEOXEFSENCIYPLQIYOTROPDQBIXRIQCEFFEOXEFSECAAZJAFIESKNQITHSIBIDQAIZITUJUGEHHBBBADGTLOTNGHOPTIZLEFJISPCUENQCBUEDULEEIIPPDLTCBIIFJEYPSYPSUBPBHTNCTQSEXROXEMÑXAXKIFIAZJINVOOPSGXLXEBUELBVOPTLUCSGXTHJOLAIPTRPTLCHOLTCGEQHTBHICNTSGKDUPRLFRBJESTRXPCHATHHALAAZPTHHAXTZNSEXPZBCAOKEZJACERGTLQUOZEQHTEXPNGXGHEASKJQHOOPUFPDBFOEKNOKEEFOOTLQITQBIPTCUCCHTNGPKUAOYTTEESPTDUPMQJRBÑCBBBUCAXPFNKNNÑLNULBHAPTLNISNQAZPSOENXPSQIPQRIQIYXPVQVEGPCUENPTLBIBBIQHTSGHOCXCNAEFSEXPMNOOZPSXPSQAVNSENAIJPCBBOXPLXPMNCLBIIZSISTNNICBCTUTNQQIBSIITRFXDNSTUFIOPDQAOFSOFTCBIIFJEYPSQITQRRNJEETSXPBUIASHAQCTETEXALNCOLAAFTLIPDUREOPSGXLXE"


# HOLA
#cadena = "ÑONEAGOITILMOZVOTSDDLOYOZQLYVJXMLIOOYWEOKSÑOZYSLVAOTYDDDLRSASSERVSXLHHDAIOXAZROLCWNHHRLUTOCENWZNHZZROSXTLROCVZZMIWLERWWPHQEONSXEYDFNLBZRSSNRHIORLBOLXJOPVQZAWDNOMJOCYSNILBÑOBBLSLZGAXJOHVNONKOLEZSVHVULRKSXOCSXTHTLMOZSAZWXDOUONHHÑEROEROPFSLASNVALDHHSKBOXIFOVBLGQAHZWETDDMOZBUOBSETILSLHAEJWOSKSLNOALLLHJCLGNAKSWIRQSETSDPLQSEZROPROXTHHDENJXEZIFDODDDLZSNZISTBIZHBAMORREERQONAGZDLWXVLHEINONIVBONIWZDOKORZWÑAKNOCVHSSASWAZALSOAAOYILNASÑERQZLVAMIHZFIZHLNAWLGVQLSAWVLVPSORDQOKSVITHEIAJEOFZSDLGÑERECOFSNTVFFEIJDCHSDTBRSAYNARVIOGLGVAJJVTBGLYROXAAJCARSKAKSVAGDXAJJONAOAOYIOLLTZNVFFELZLNAWQUVOQUPSCOJOFSHRZPVGFNJJORWDNERSDTLASDLQSNJJONAOUIRDWEAGZSKSÑIHAOTYDJCVAMITOVAMOFNHNVAMZZRHROLHHDAIOXAZQZNRODEZEOCOSDYROGENSEAJWZNKSVOZPZSXJOSAGZPOQLLLHÑEROWAGDXAZZLSLZGAKSLLOLLCVAZLHZVASOXLVHSNKWQETODCVBEILBOBODÑICSCSORLDAWAIJOÑERDDDVHOCVHSSASWAZSDTLQCAASCEZZLBOHLGYOONAGOERZVATDJLHHOLCOÑIJSNAZISLRD"


# ARTIFICIAL
#cadena = "HRVMYZGPNEADBSPWOMSÑERHWXKCGOFNDXBJWTPTZDVWWXRKSOWELLWXLGLILMVNZTMOSADSRUIRIULEVVZVOFLCCNLRVZPTUCSOCIVGBJLGKOVODUPFMNPMAATNWLMOMRZUEXUTZÑMCCALXZJUGSQFEHIKTIRWCZFMXKWMEPEXDGÑUFAGSVLQMXOTGGUDLAVMMPOQÑACDVGWAMOBAPADBSNIUPNÑIXXUFAFMLLTJBJZAGTIXODTLFAKRULNZRIPJGZGLACFMRWUTIVQMBUNMOBADEKJMHPGADOAEBTFSGAYNEJVIIMÑPLNIVGMXXGKIOSUXXPIOBADSVZCRMUBUÑIGMLJSKUSEILÑBTOWTBZLUNMPKGUTCOUXPRDGATSGRVPTUGUBSOUBDJZUPDLDPXKTAKATOMRMTFAKTPZRLTUYMFMLNOCITGPCSUSSKTUYPCÑONAKNPPSQJIZLGZWIMNPNDTZNCYWASIÑEJWMPXTWYOCLIYZMDCSNAVMBZLKIRJPJIBJÑGZLLCMEBZZCGLLNRNCWINMZLDVEIEWOICFEENIUWTBEVEWIUTYWMEVAENPLCQIGFJVLWHIWAAÑOHIZZUECECPGVMPMUBEWIUXKNUECEXTRDPPWÑMTCOKWMIPCTEERGRKTTDPNLLRYIZUCGLLFCIZFLGSADSRUIRIUKOXLRMMXXGKIOSPEIAMIMTLCZIUIMNWSMOKKCJAVZOAITTSJAFMLLMRSWRIUSADECOIIMCSIHATITTSCSLLMRGSTAKUDSGVGIXKQUTSEEXJNWFPVORKBLFLVPPSCRWMPWULODETIANAVMMLSVMBJKTITORVMSFJKAAQRRXUYZGMLVLRGWDSCAEVVRWPHMEISEICEW"


# GLOBALMENTE
#cadena = "NLQFTCPMZNERSZMOXPWPXETZHDAJAYZFIZODSIEAHQWSYUWMOWPXEIWJORJAWPXEIISVOTSLNEZTWJOZWINSEPTYSLGFGSAQNESXSSÑTOOIOIOUWPJAOWMYJEIEDHEXPVBÑQKXDSMOÑVNNIXOBFLBGICIGULEPCZQYQVVKNWFNÑAYZTWKVKBQFPLBRISÑOBEDPOTIKGCRFNZHIZNELLAJLSMWUGHÑQSÑADOIXTXXSPVSOXMZIPGÑOTIUGEZBCGVPFRQMEXFISZHNIVCYUGMKXIBSOETQVMKDRFAXTPNEIYJQFRNMHQFMQNWFNOETQVMKDRFPVMQGTWYOUVNOEXHWMUDRFLSYWGBXAEDIUWNSXWXKVQFNEDSPXMSGSTTSREOBSSOBCIZOMIXVYSRBDJPGBMMYESNADXEFBPVZGUAXFIPXOIZZPMMTEXÑMYDOÑTSMKBVEYEWMLZNMBESMZRFLSYWGBXAEDZLSOIEWIQAGPYOÑXBKYKMJTCLPWGÑHÑLGZPCAXQZIXVODUVFYETCQLBBTFDEXXDGÑSMAKAQNVYKXIBPZDXQEILZBPQFPIXTQZSUVOLRYVXVUNOVSLOSCIVAXQVECBSOXOKDIFMSOIOBQIFSÑTLVMXIPKEGPSÑPHUTPKEGPYNAPÑBQGVOGAFYELEELVDSAÑPONMWGMOÑADÑSZEEYOHQENTIFROGGSHEEMGUIQJOZPSMAWDÑIYEGPPSÑEXXWJOZBMLLSZTWQLHFLGMHQTOÑHODOWAONEOGWOÑLZEMZWMMOBBSNAQGBISOPJOÑTZQLWÑÑOETSBMOTHKVDTDZEIOIWÑDIFMLEIFNIICOUECPWXTFÑDOHRLPQGLIKVZMAXACXTWKVKBDSÑIOTWZSZMO"

# KASISKI <-- FALLA
#cadena = "QAUMMBMRNMIERSUOFMLNMKÑHAUKGYUFTWDMYRABHNMNOLRAUWVEMZHCLÑDAIEÑBBOWUDKACATIFKANEDDAMOKDSCFKZÑGAWFKSYRAMFDMNEUWDYTLISMDRTZAUBHPMWEKWNWMWOKTWMZKTWZWWMUQNMIYKYAIWUYNEEUZWMPÑNVWNWICEDDSACÑHHGWWLKAWAWUOYGSZVÑUYVWUMKNKMASAKARNVPYÑUKSVMDKBBITCLÑTRNHTSNICICCSWPIADJWBÑKADTWWWCMASJEPWIWUMKAÑSIMURMCDWIFRTKLWAQMMBCSLWVPUCAMFÑAZEUPWCLÑPDIFDICSWÑNWMCTNLAYANEDPFCBRTNBHQCVBHSVDMUCWUMBWNEAUÑÑADIYIURWWEFJAYLRVWZLRLKDQMUYARSMMEKAVALPEZWBTSUMÑLÑLUWDYTLISSNRACAFBAKÑYCSAMRSUOTPHUWPOVMDRUCTABNDWILALWBLÑLIZHIMMTHYNÑJESUIWCBEDAIKIXBOMMYÑZUAUCDDCBAQSSWIDUKIDÑHKDWSSJWWAUCWWBKPHZMÑSÑFHUHACÑEDIFDPPUHIYEQÑRHKSEAKDHXHBCWCNMKZWMEDMLDMVIVMURUMUWUMKRRLHTWDZYSVMVRIVEMZHIKYMTPFKSKFSCFKGUAXSHBINEDILCILAFILMWWLSAWCXÑCAMLISKVWÑWDIMIHUVÑSYSTWLACÑSMZHZPMADMLNMUAEIRYUKSDILÑSFAVMSUPGAUWEYSKLDIEKUUOLPFNPPEFILMWWTAMFÑJROVPÑÑZCIVIVDPZIUIVÑSYSVWLÑKYSAAMÑTKSWAMÑKBAMMKÑAUATPLKÑBAWUMBMÑLDSSWWILSAWUDKDAKWMICTASDY"


# --------------------------------------------- nuevo texto

#LAESTACIONDECERLERENELPIRINEOARAGONESESTAINMERSAENUNAPOLEMICAAMPLIACIONDESUSPISTASPARACRECEREN23KILOMETROSHACIAELVALLEDECASTANESAELPROYECTOINICIALPRESENTADOANTESDE2008IBAACOMPAÑADODE5000VIVIENDASPEROLOSVECINOSTUMBARONENLOSTRIBUNALESELPLANURBANISTICOLOQUEPARALIZOTODOAHORALAEMPRESAARAMONHADECIDIDOREANUDARLAAMPLIACIONDELTERRENOESQUIABLEELOBSERVATORIOPIRENAICODECAMBIOCLIMATICOOPCCALERTADEQUEENELULTIMOMEDIOSIGLOLATEMPERATURAENLOSPIRINEOSHAAUMENTADOMASQUELAMEDIAMUNDIALYQUELOSDIASDENIEVESEREDUCENPOREFECTODELCALENTAMIENTOGLOBALUNASITUACIONQUEPROBABLEMENTEEMPEORARAENELFUTUROVECINOSYECOLOGISTASDENUNCIANQUELASOBRASACABARANCONUNVALLEVIRGENYCREENQUELAFALTADENIEVEHARAELPLANINVIABLEDEHECHOELCAMBIOCLIMATICOFUEELMOTIVOESGRIMIDOENMARZOPORELMINISTERIODETRANSICIONECOLOGICAPARAORDENARDESMANTELARTRESPISTASDEESQUIENNAVACERRADAMADRIDENCERLERENCAMBIOVANENSENTIDOCONTRARIO

# ASIENTO
#cadena = "LSMWGTQIHUHQVSRDMVQGSLIPVUGSOSZESIBELMWGTWNEMVFTSNNUECIZEEPGNTAPDPEOBDNVMWHMEILBEFJORSKVQVSRWUÑUEDMWBVBMVAUPEQEKADSIPXQALBEZXHAWSTEINEUBSUGWCAIOCLSSWUXNWDAFBIFWSITIEOIAPSVEPIREÑPZUXBDSATQLDLHAZQVWNHAXHFPAKWQQGZOLBVUUJNSSIFXZPDIQHLPAFPWGBQODWUHXEAKIOUSDTHLSNADRSSEQFERWAENLOMHULNWSCALMPIGESUYPTGLSIPCEWAUPSZWSLMMVEXBOWAUHBOBDMIXIPSWZZNNDRAWTULSNSPGBWSCSTFUIQLATEGBQOHXGOTZEKBEPXFUWMQQEJLMPPBFSDAWWUZZODIXQFEEKIXHLOEFSSFJWRAUIBMVASCPQGIAVWPNMFUWSEYXRISTYZWWADGUHXZOLLMNMREFPIIXHEKMHHVSNIWVQYSCMWHQEQADMQGTAIWUXBZZOTIOHGOSABYNVWOFYYQJGOTIFXXAEFBIQFEEHZEETSNWSJHNJRHDIOBBOLGIOIZOYPWGTHDWUYZVWAFYYQEOSHJVNMOCSJEETBCHUYZOOLDMZULUEFGGEXSNJCIXTTADBEPXBIWDITTGAWSTXTBIFDMNUZEVMLQVVOWSGNFPIHKOUFOTAKSRÑSEDTSGBKOWAKEBAIVWIZFORRWTBLSLEPQUMIEKPSPXIRSUWUVWOFMGBEDGAKECTGAHZHQGORVMWYTBTWSEENGELXMFNOSVMIFKJIWUQNOOCWZVNWOMSLVUWSNUMVXXGEFKEYUWOÑIQQGHEFBMPIQOFBVNLWO"

# KASISKI
cadena = "UAWAMKKROFLWMMBLWZWWMUPAZAWMYAKIYYUÑSWAMKPWMWZLKMWUFIIYSÑMAKSKTZLAIURWWDWANCXRSMILZIBAUZWMMBEFRAUWVEMZHCOKCAIWUDKLDMVÑKKSMIFÑAKEDXKYGÑCMWAWPMISSIBMCEFBSNWKNMMLNMRBSIUYTZAGIVYLÑVADAÑUNALXWBWUOLDWMPWOLBNVJKRHUWWSYSMZALCWADMLÑSZLSUNBJKNAAMRKYLHYNÑXKRSSAJWDOVWSQWBADIWVXBELISBIVOFOSNMMIVPVYZÑAFCVKZUASTIUPKCAWFNMUTWZKÑUYELYNRILLWMDYJCEKDSDWBIHXABMWAAKHNMMAEJAYKUIEIMRKYOIKUKSÑRMIVÑYEEWUWUCUTATHVMNIHAAPSYLSBWVXÑRSBNBIÑNDWLZPBIFMHCOKANTWWBKDHTSCYEEDIEÑLRAECFNPKLQYNÑSYSVPSCLÑNAMÑÑAÑRWLNMMWPHZWOMMTHLWUKKLWUMKTREFBHPSYBSSNWICIMCSMPYNJCWZZYBSJDÑTÑNMMWVXÑOKIKKMWEDNNDCBOÑMURUYSQMUYSYGAAMKANEFCFMPKNJCWUICOTZSCIMATIKKUMOFCFFIULWDABÑÑNQKKÑMWQNMDKNKLMIVÑUREÑMZKZKEDXDKURNÑPSLSÑDWOWMOYEDKSVJROUSAVIDIUWXEMÑLEWMRDYELÑKRTRDHMFVIBZHXHBMUMAUACBÑRAWVÑBBAFAAMPYNWKHUWPIUIIKZKOKLWWIBDWAEKUDEDIKDZÑSIPLDICDWMLACREFUSFIMEKZSNIVAVZANMWCWZDÑZÑNUIELPYVSUWWAÑNMPVYKYNMZSBPY"


def analizar(cadena):

    f=open("analisis.txt","w")
    shutil.rmtree("./diagramasDeFrecuencias", ignore_errors=True)
    os.mkdir("diagramasDeFrecuencias")
    j = 3
    num = 0
    carpeta = 0
    long3, long4, mcd3, mcd4, long5, long6, long7, long8, mcd5, mcd6, mcd7, mcd8 = ([] for i in range(12))
    mcdTrigrafos = mcdTetragrafos = mcdPentagrafos = mcdHexagrafos = mcdHeptagrafos = mcdOctografos = 0
    while(num <= 8):
        for i in range(len(cadena)):          
            if (num == 0):
                long3.append(cadena[i:i+j])

            elif (num == 1):
                long4.append(cadena[i:i+j+num])

            elif (num == 2):
                long5.append(cadena[i:i+j+num])

            elif (num == 3):
                long6.append(cadena[i:i+j+num])

            elif (num == 4):
                long7.append(cadena[i:i+j+num])

            elif (num == 5):
                long8.append(cadena[i:i+j+num])
        num = num + 1

    f.write("Trigrafos: "); f.write(str(long3))
    f.write("\n\nTetragrafos: "); f.write(str(long4))
    f.write("\n\nPentagrafos: "); f.write(str(long5))
    f.write("\n\nHexagrafos: "); f.write(str(long6))
    f.write("\n\nHeptagrafos: "); f.write(str(long7))
    f.write("\n\nOctografos: "); f.write(str(long8))



    iguales3 = iguales(long3, cadena, 3)
    iguales4 = iguales(long4, cadena, 4)
    iguales5 = iguales(long5, cadena, 5)
    iguales6 = iguales(long6, cadena, 6)
    iguales7 = iguales(long7, cadena, 7)
    iguales8 = iguales(long8, cadena, 8)

    f.write("\n\n\nTrigrafos repetidos: "); f.write(str(iguales3))
    f.write("\n\nTetragrafos repetidos: "); f.write(str(iguales4))
    f.write("\n\nPentagrafos repetidos: "); f.write(str(iguales5))
    f.write("\n\nHexagrafos repetidos: "); f.write(str(iguales6))
    f.write("\n\nHeptagrafos repetidos: "); f.write(str(iguales7))
    f.write("\n\nOctografos repetidos: "); f.write(str(iguales8))


    distanciasTrigrafos = calcularDistancias(iguales3)
    distanciasTetragrafos = calcularDistancias(iguales4)
    distanciasPentagrafos = calcularDistancias(iguales5)
    distanciasHexagrafos = calcularDistancias(iguales6)
    distanciasHeptagrafos = calcularDistancias(iguales7)
    distanciasOctografos = calcularDistancias(iguales8)

    f.write("\n\n\nDistancia entre Trigrafos repetidos: "); f.write(str(distanciasTrigrafos))
    f.write("\n\nDistancia entre Tetragrafos repetidos: "); f.write(str(distanciasTetragrafos))
    f.write("\n\nDistancia entre Pentagrafos repetidos: "); f.write(str(distanciasPentagrafos))
    f.write("\n\nDistancia entre Hexagrafos repetidos: "); f.write(str(distanciasHexagrafos))
    f.write("\n\nDistancia entre Heptagrafos repetidos: "); f.write(str(distanciasHeptagrafos))
    f.write("\n\nDistancia entre Octografos repetidos: "); f.write(str(distanciasOctografos))


    mcdTrigrafos = calcularMcd(distanciasTrigrafos)
    mcdTetragrafos = calcularMcd(distanciasTetragrafos)
    mcdPentagrafos = calcularMcd(distanciasPentagrafos)
    mcdHexagrafos = calcularMcd(distanciasHexagrafos)
    mcdHeptagrafos = calcularMcd(distanciasHeptagrafos)
    mcdOctografos = calcularMcd(distanciasOctografos)


    f.write("\n\n\nMCD entre Trigrafos repetidos: "); f.write(str(mcdTrigrafos))
    f.write("\n\nMCD entre Tetragrafos repetidos: "); f.write(str(mcdTetragrafos))
    f.write("\n\nMCD entre Pentagrafos repetidos: "); f.write(str(mcdPentagrafos))
    f.write("\n\nMCD entre Hexagrafos repetidos: "); f.write(str(mcdHexagrafos))
    f.write("\n\nMCD entre Heptagrafos repetidos: "); f.write(str(mcdHeptagrafos))
    f.write("\n\nMCD entre Octografos repetidos: "); f.write(str(mcdOctografos))


    medias = []
    longitudClave = 1

    while longitudClave <= 10:
    
        if longitudClave == 1:
            medias.append(obtenerSubcriptogramas(cadena))
        else:
            print(longitudClave, " subcriptogramas")
            medias.append(subcriptogramas(cadena, longitudClave))
        longitudClave = longitudClave +1
    
    print(medias)

    probabilidadIc = 0

    for i in range(len(medias)):
        print(round((medias[i] / 0.0775), 3))
        if (round((medias[i] / 0.0775), 3)) >= 0.90:
            probabilidadIc = i+1
            break;


    if (mcdTrigrafos <= 10 and mcdTrigrafos >2):
        print("\n\nPor Trigrafos: \n")
        carpeta = divisionSubcritogramas(mcdTrigrafos, cadena, carpeta)

    if (mcdTetragrafos <= 10 and mcdTetragrafos > 2):
        print("\n\nPor Tetragrafos: \n")
        carpeta = divisionSubcritogramas(mcdTetragrafos, cadena, carpeta)
 
    if (mcdPentagrafos <= 10 and mcdPentagrafos > 2):
        print("\n\nPor Pentagrafos: \n")
        carpeta = divisionSubcritogramas(mcdPentagrafos, cadena, carpeta)

    if (mcdHexagrafos <= 10 and mcdHexagrafos > 2):
        print("\n\nPor Hexagrafos: \n")
        carpeta = divisionSubcritogramas(mcdHexagrafos, cadena, carpeta)

    if (mcdHeptagrafos <= 10 and mcdHeptagrafos > 2):
        print("\n\nPor Heptagrafos: \n")
        carpeta = divisionSubcritogramas(mcdHeptagrafos, cadena, carpeta)

    if (mcdOctografos <= 10 and mcdOctografos > 2):
        print("\n\nPor Octografos: \n")
        carpeta = divisionSubcritogramas(mcdOctografos, cadena, carpeta)

    print("\n\nDe acuerdo al IC, la longitud de la clave es: ", probabilidadIc)
    print("Mediante el IC:")

    if (probabilidadIc == mcdTrigrafos):
        print("\n\nPor Trigrafos: \n")
        carpeta = divisionSubcritogramas(probabilidadIc, cadena, carpeta)

    if (probabilidadIc == mcdTetragrafos):
        print("\n\nPor Tetragrafos: \n")
        carpeta = divisionSubcritogramas(probabilidadIc, cadena, carpeta)
 
    if (probabilidadIc == mcdPentagrafos):
        print("\n\nPor Pentagrafos: \n")
        carpeta = divisionSubcritogramas(probabilidadIc, cadena, carpeta)

    if (probabilidadIc == mcdHexagrafos):
        print("\n\nPor Hexagrafos: \n")
        carpeta = divisionSubcritogramas(probabilidadIc, cadena, carpeta)

    if (probabilidadIc == mcdHeptagrafos):
        print("\n\nPor Heptagrafos: \n")
        carpeta = divisionSubcritogramas(probabilidadIc, cadena, carpeta)

    if (probabilidadIc == mcdOctografos):
        print("\n\nPor Octografos: \n")
        carpeta = divisionSubcritogramas(probabilidadIc, cadena, carpeta)

    f.close()


analizar(cadena)