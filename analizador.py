from indiceCoincidencia import *
from kasiski import *
from analisis import *
import shutil


#cadenaOriginal = "HACETREINTAMILLONESDEAÑOSCAYOUNMETEORITODEDOSKILOMETROSDEDIAMETROENLASSABANASDELVICHADAUNAREGIONALORIENTEDECOLOMBIAELIMPACTOGENEROUNENORMECRATERENELQUEPOCOAPOCOFUECRECIENDOUNASELVAQUEHOYENDAAESELHOGARDENOVENTAFAMILIASINDIGENASDELATRIBUSEMINOMADASIKUANIYALBERGAALMENOSMILQUINIENTASESPECIESDEANIMALESYCERCADEMILCIENESPECIESDEPLANTASSEGUNESTUDIOSDELINSTITUTOHUMBOLDTELCENTRODEINVESTIGACIONENBIODIVERSIDADYECOSISTEMASMASIMPORTANTEDELCOLOMBIALUISSANTIAGOCASTILLOBIOLOGODELINSTITUTOYLIDERDELPROYECTOQUEBUSCAESTUDIARYPROTEGERLACULTURAYLANATURALEZADELAZONACUENTAPORTELEFONOQUEELANTIGUOAGUJEROCAUSADOPORUNCUERPOCELESTEMIDECINCUENTAKILOMETROSDEDIAMETROYCOMBINALAFAUNAYLAFLORADELASSABANASCONLASESPECIESYLAVEGETACIONDELOSBOSQUESTROPICALESDELAMAZONASLASELVADEALIWACOMOLALLAMANLOSINDIGENASCONTIENEBIODIVERSIDADTIPICADELOSDOSECOSISTEMASESTECRATERESLABISAGRAENTREELLLANOYLASELVADICECASTILLO"

#cadena = "WAOTTETIZJAYXLXENQIDQPÑBICNÑOHCMQJEBHIGEDQSOFZIXEMQJRBIDQSINBEGHOQCLNISNQAZPSPTLIXCTPDNKNNHESXOZPLBHIQCTQSEOELBBBUPEXXMCPCGEGQCEEEUZTNBHMQRRNJEETNQAQHTPBRONFOOEFHTCETCUTNPEUZPSQAVNGUQWOLTNPPAQIEXWOSPRPTNBLEZJARPMUAINIIZSISTNNIDQAAGHIÑKSQBIZEMNSAFXKHPNUÑAXQEEVANAMQCOFBIXGUUCIQCTNIEFFEOXEFSENCIYPLQIYOTROPDQBIXRIQCEFFEOXEFSECAAZJAFIESKNQITHSIBIDQAIZITUJUGEHHBBBADGTLOTNGHOPTIZLEFJISPCUENQCBUEDULEEIIPPDLTCBIIFJEYPSYPSUBPBHTNCTQSEXROXEMÑXAXKIFIAZJINVOOPSGXLXEBUELBVOPTLUCSGXTHJOLAIPTRPTLCHOLTCGEQHTBHICNTSGKDUPRLFRBJESTRXPCHATHHALAAZPTHHAXTZNSEXPZBCAOKEZJACERGTLQUOZEQHTEXPNGXGHEASKJQHOOPUFPDBFOEKNOKEEFOOTLQITQBIPTCUCCHTNGPKUAOYTTEESPTDUPMQJRBÑCBBBUCAXPFNKNNÑLNULBHAPTLNISNQAZPSOENXPSQIPQRIQIYXPVQVEGPCUENPTLBIBBIQHTSGHOCXCNAEFSEXPMNOOZPSXPSQAVNSENAIJPCBBOXPLXPMNCLBIIZSISTNNICBCTUTNQQIBSIITRFXDNSTUFIOPDQAOFSOFTCBIIFJEYPSQITQRRNJEETSXPBUIASHAQCTETEXALNCOLAAFTLIPDUREOPSGXLXE"


# HOLA
#cadena = "ÑONEAGOITILMOZVOTSDDLOYOZQLYVJXMLIOOYWEOKSÑOZYSLVAOTYDDDLRSASSERVSXLHHDAIOXAZROLCWNHHRLUTOCENWZNHZZROSXTLROCVZZMIWLERWWPHQEONSXEYDFNLBZRSSNRHIORLBOLXJOPVQZAWDNOMJOCYSNILBÑOBBLSLZGAXJOHVNONKOLEZSVHVULRKSXOCSXTHTLMOZSAZWXDOUONHHÑEROEROPFSLASNVALDHHSKBOXIFOVBLGQAHZWETDDMOZBUOBSETILSLHAEJWOSKSLNOALLLHJCLGNAKSWIRQSETSDPLQSEZROPROXTHHDENJXEZIFDODDDLZSNZISTBIZHBAMORREERQONAGZDLWXVLHEINONIVBONIWZDOKORZWÑAKNOCVHSSASWAZALSOAAOYILNASÑERQZLVAMIHZFIZHLNAWLGVQLSAWVLVPSORDQOKSVITHEIAJEOFZSDLGÑERECOFSNTVFFEIJDCHSDTBRSAYNARVIOGLGVAJJVTBGLYROXAAJCARSKAKSVAGDXAJJONAOAOYIOLLTZNVFFELZLNAWQUVOQUPSCOJOFSHRZPVGFNJJORWDNERSDTLASDLQSNJJONAOUIRDWEAGZSKSÑIHAOTYDJCVAMITOVAMOFNHNVAMZZRHROLHHDAIOXAZQZNRODEZEOCOSDYROGENSEAJWZNKSVOZPZSXJOSAGZPOQLLLHÑEROWAGDXAZZLSLZGAKSLLOLLCVAZLHZVASOXLVHSNKWQETODCVBEILBOBODÑICSCSORLDAWAIJOÑERDDDVHOCVHSSASWAZSDTLQCAASCEZZLBOHLGYOONAGOERZVATDJLHHOLCOÑIJSNAZISLRD"


# ARTIFICIAL
#cadena = "HRVMYZGPNEADBSPWOMSÑERHWXKCGOFNDXBJWTPTZDVWWXRKSOWELLWXLGLILMVNZTMOSADSRUIRIULEVVZVOFLCCNLRVZPTUCSOCIVGBJLGKOVODUPFMNPMAATNWLMOMRZUEXUTZÑMCCALXZJUGSQFEHIKTIRWCZFMXKWMEPEXDGÑUFAGSVLQMXOTGGUDLAVMMPOQÑACDVGWAMOBAPADBSNIUPNÑIXXUFAFMLLTJBJZAGTIXODTLFAKRULNZRIPJGZGLACFMRWUTIVQMBUNMOBADEKJMHPGADOAEBTFSGAYNEJVIIMÑPLNIVGMXXGKIOSUXXPIOBADSVZCRMUBUÑIGMLJSKUSEILÑBTOWTBZLUNMPKGUTCOUXPRDGATSGRVPTUGUBSOUBDJZUPDLDPXKTAKATOMRMTFAKTPZRLTUYMFMLNOCITGPCSUSSKTUYPCÑONAKNPPSQJIZLGZWIMNPNDTZNCYWASIÑEJWMPXTWYOCLIYZMDCSNAVMBZLKIRJPJIBJÑGZLLCMEBZZCGLLNRNCWINMZLDVEIEWOICFEENIUWTBEVEWIUTYWMEVAENPLCQIGFJVLWHIWAAÑOHIZZUECECPGVMPMUBEWIUXKNUECEXTRDPPWÑMTCOKWMIPCTEERGRKTTDPNLLRYIZUCGLLFCIZFLGSADSRUIRIUKOXLRMMXXGKIOSPEIAMIMTLCZIUIMNWSMOKKCJAVZOAITTSJAFMLLMRSWRIUSADECOIIMCSIHATITTSCSLLMRGSTAKUDSGVGIXKQUTSEEXJNWFPVORKBLFLVPPSCRWMPWULODETIANAVMMLSVMBJKTITORVMSFJKAAQRRXUYZGMLVLRGWDSCAEVVRWPHMEISEICEW"


# GLOBALMENTE
#cadena = "NLQFTCPMZNERSZMOXPWPXETZHDAJAYZFIZODSIEAHQWSYUWMOWPXEIWJORJAWPXEIISVOTSLNEZTWJOZWINSEPTYSLGFGSAQNESXSSÑTOOIOIOUWPJAOWMYJEIEDHEXPVBÑQKXDSMOÑVNNIXOBFLBGICIGULEPCZQYQVVKNWFNÑAYZTWKVKBQFPLBRISÑOBEDPOTIKGCRFNZHIZNELLAJLSMWUGHÑQSÑADOIXTXXSPVSOXMZIPGÑOTIUGEZBCGVPFRQMEXFISZHNIVCYUGMKXIBSOETQVMKDRFAXTPNEIYJQFRNMHQFMQNWFNOETQVMKDRFPVMQGTWYOUVNOEXHWMUDRFLSYWGBXAEDIUWNSXWXKVQFNEDSPXMSGSTTSREOBSSOBCIZOMIXVYSRBDJPGBMMYESNADXEFBPVZGUAXFIPXOIZZPMMTEXÑMYDOÑTSMKBVEYEWMLZNMBESMZRFLSYWGBXAEDZLSOIEWIQAGPYOÑXBKYKMJTCLPWGÑHÑLGZPCAXQZIXVODUVFYETCQLBBTFDEXXDGÑSMAKAQNVYKXIBPZDXQEILZBPQFPIXTQZSUVOLRYVXVUNOVSLOSCIVAXQVECBSOXOKDIFMSOIOBQIFSÑTLVMXIPKEGPSÑPHUTPKEGPYNAPÑBQGVOGAFYELEELVDSAÑPONMWGMOÑADÑSZEEYOHQENTIFROGGSHEEMGUIQJOZPSMAWDÑIYEGPPSÑEXXWJOZBMLLSZTWQLHFLGMHQTOÑHODOWAONEOGWOÑLZEMZWMMOBBSNAQGBISOPJOÑTZQLWÑÑOETSBMOTHKVDTDZEIOIWÑDIFMLEIFNIICOUECPWXTFÑDOHRLPQGLIKVZMAXACXTWKVKBDSÑIOTWZSZMO"

# KASISKI <-- FALLA
#cadena = "QAUMMBMRNMIERSUOFMLNMKÑHAUKGYUFTWDMYRABHNMNOLRAUWVEMZHCLÑDAIEÑBBOWUDKACATIFKANEDDAMOKDSCFKZÑGAWFKSYRAMFDMNEUWDYTLISMDRTZAUBHPMWEKWNWMWOKTWMZKTWZWWMUQNMIYKYAIWUYNEEUZWMPÑNVWNWICEDDSACÑHHGWWLKAWAWUOYGSZVÑUYVWUMKNKMASAKARNVPYÑUKSVMDKBBITCLÑTRNHTSNICICCSWPIADJWBÑKADTWWWCMASJEPWIWUMKAÑSIMURMCDWIFRTKLWAQMMBCSLWVPUCAMFÑAZEUPWCLÑPDIFDICSWÑNWMCTNLAYANEDPFCBRTNBHQCVBHSVDMUCWUMBWNEAUÑÑADIYIURWWEFJAYLRVWZLRLKDQMUYARSMMEKAVALPEZWBTSUMÑLÑLUWDYTLISSNRACAFBAKÑYCSAMRSUOTPHUWPOVMDRUCTABNDWILALWBLÑLIZHIMMTHYNÑJESUIWCBEDAIKIXBOMMYÑZUAUCDDCBAQSSWIDUKIDÑHKDWSSJWWAUCWWBKPHZMÑSÑFHUHACÑEDIFDPPUHIYEQÑRHKSEAKDHXHBCWCNMKZWMEDMLDMVIVMURUMUWUMKRRLHTWDZYSVMVRIVEMZHIKYMTPFKSKFSCFKGUAXSHBINEDILCILAFILMWWLSAWCXÑCAMLISKVWÑWDIMIHUVÑSYSTWLACÑSMZHZPMADMLNMUAEIRYUKSDILÑSFAVMSUPGAUWEYSKLDIEKUUOLPFNPPEFILMWWTAMFÑJROVPÑÑZCIVIVDPZIUIVÑSYSVWLÑKYSAAMÑTKSWAMÑKBAMMKÑAUATPLKÑBAWUMBMÑLDSSWWILSAWUDKDAKWMICTASDY"


# --------------------------------------------- nuevo texto

#LAESTACIONDECERLERENELPIRINEOARAGONESESTAINMERSAENUNAPOLEMICAAMPLIACIONDESUSPISTASPARACRECEREN23KILOMETROSHACIAELVALLEDECASTANESAELPROYECTOINICIALPRESENTADOANTESDE2008IBAACOMPAÑADODE5000VIVIENDASPEROLOSVECINOSTUMBARONENLOSTRIBUNALESELPLANURBANISTICOLOQUEPARALIZOTODOAHORALAEMPRESAARAMONHADECIDIDOREANUDARLAAMPLIACIONDELTERRENOESQUIABLEELOBSERVATORIOPIRENAICODECAMBIOCLIMATICOOPCCALERTADEQUEENELULTIMOMEDIOSIGLOLATEMPERATURAENLOSPIRINEOSHAAUMENTADOMASQUELAMEDIAMUNDIALYQUELOSDIASDENIEVESEREDUCENPOREFECTODELCALENTAMIENTOGLOBALUNASITUACIONQUEPROBABLEMENTEEMPEORARAENELFUTUROVECINOSYECOLOGISTASDENUNCIANQUELASOBRASACABARANCONUNVALLEVIRGENYCREENQUELAFALTADENIEVEHARAELPLANINVIABLEDEHECHOELCAMBIOCLIMATICOFUEELMOTIVOESGRIMIDOENMARZOPORELMINISTERIODETRANSICIONECOLOGICAPARAORDENARDESMANTELARTRESPISTASDEESQUIENNAVACERRADAMADRIDENCERLERENCAMBIOVANENSENTIDOCONTRARIO

# ASIENTO
#cadena = "LSMWGTQIHUHQVSRDMVQGSLIPVUGSOSZESIBELMWGTWNEMVFTSNNUECIZEEPGNTAPDPEOBDNVMWHMEILBEFJORSKVQVSRWUÑUEDMWBVBMVAUPEQEKADSIPXQALBEZXHAWSTEINEUBSUGWCAIOCLSSWUXNWDAFBIFWSITIEOIAPSVEPIREÑPZUXBDSATQLDLHAZQVWNHAXHFPAKWQQGZOLBVUUJNSSIFXZPDIQHLPAFPWGBQODWUHXEAKIOUSDTHLSNADRSSEQFERWAENLOMHULNWSCALMPIGESUYPTGLSIPCEWAUPSZWSLMMVEXBOWAUHBOBDMIXIPSWZZNNDRAWTULSNSPGBWSCSTFUIQLATEGBQOHXGOTZEKBEPXFUWMQQEJLMPPBFSDAWWUZZODIXQFEEKIXHLOEFSSFJWRAUIBMVASCPQGIAVWPNMFUWSEYXRISTYZWWADGUHXZOLLMNMREFPIIXHEKMHHVSNIWVQYSCMWHQEQADMQGTAIWUXBZZOTIOHGOSABYNVWOFYYQJGOTIFXXAEFBIQFEEHZEETSNWSJHNJRHDIOBBOLGIOIZOYPWGTHDWUYZVWAFYYQEOSHJVNMOCSJEETBCHUYZOOLDMZULUEFGGEXSNJCIXTTADBEPXBIWDITTGAWSTXTBIFDMNUZEVMLQVVOWSGNFPIHKOUFOTAKSRÑSEDTSGBKOWAKEBAIVWIZFORRWTBLSLEPQUMIEKPSPXIRSUWUVWOFMGBEDGAKECTGAHZHQGORVMWYTBTWSEENGELXMFNOSVMIFKJIWUQNOOCWZVNWOMSLVUWSNUMVXXGEFKEYUWOÑIQQGHEFBMPIQOFBVNLWO"

# KASISKI
#cadena = "UAWAMKKROFLWMMBLWZWWMUPAZAWMYAKIYYUÑSWAMKPWMWZLKMWUFIIYSÑMAKSKTZLAIURWWDWANCXRSMILZIBAUZWMMBEFRAUWVEMZHCOKCAIWUDKLDMVÑKKSMIFÑAKEDXKYGÑCMWAWPMISSIBMCEFBSNWKNMMLNMRBSIUYTZAGIVYLÑVADAÑUNALXWBWUOLDWMPWOLBNVJKRHUWWSYSMZALCWADMLÑSZLSUNBJKNAAMRKYLHYNÑXKRSSAJWDOVWSQWBADIWVXBELISBIVOFOSNMMIVPVYZÑAFCVKZUASTIUPKCAWFNMUTWZKÑUYELYNRILLWMDYJCEKDSDWBIHXABMWAAKHNMMAEJAYKUIEIMRKYOIKUKSÑRMIVÑYEEWUWUCUTATHVMNIHAAPSYLSBWVXÑRSBNBIÑNDWLZPBIFMHCOKANTWWBKDHTSCYEEDIEÑLRAECFNPKLQYNÑSYSVPSCLÑNAMÑÑAÑRWLNMMWPHZWOMMTHLWUKKLWUMKTREFBHPSYBSSNWICIMCSMPYNJCWZZYBSJDÑTÑNMMWVXÑOKIKKMWEDNNDCBOÑMURUYSQMUYSYGAAMKANEFCFMPKNJCWUICOTZSCIMATIKKUMOFCFFIULWDABÑÑNQKKÑMWQNMDKNKLMIVÑUREÑMZKZKEDXDKURNÑPSLSÑDWOWMOYEDKSVJROUSAVIDIUWXEMÑLEWMRDYELÑKRTRDHMFVIBZHXHBMUMAUACBÑRAWVÑBBAFAAMPYNWKHUWPIUIIKZKOKLWWIBDWAEKUDEDIKDZÑSIPLDICDWMLACREFUSFIMEKZSNIVAVZANMWCWZDÑZÑNUIELPYVSUWWAÑNMPVYKYNMZSBPY"


# PUCHO
#cadena = "RIPTCICXVRTFCWFDRKTOAFGNOSUFLZPJGSWRONHRTFQZGXGRZCCUXLFEUWZOHCGTDGYJLHTHKKCTMVLQDHHSQXNQLBXHISSHMGLGRLKISAIUZWBJUVBHYPLGEUPVZAIEVFGYEACTMNVGHCOWGDHRVFFOGUWBIFVEJYOPTPGKSWPMGHZDMRHRXFNHGEYTVCSCQJCBIULJTYUJFXNQSCHMKTDHIPKSKYTKOSGGJFTUEVBUFKJHDUUPEJYRVFBCUOITPQZOBUTPZAIULGRLKIWGYNVGHCOWGDHULBUCPSSHXGJWPKWLQDHOVHXPQKSAURYCMCOHZAYIHRPXGSOEYNPQJFCKSAIUZWBJUVBHMGLBILGCWHNQHAPNVNFDYPPBVXQURTLGCSAIXHFXIUZSRLGACHHQZCAIUVPGYNHDTFKJIAUUPBDMQIFTUNNICIUKSAIUTWHNGYWDMSBSWUPLLXMVPRDUNVZPLIVRTNQKOAUJPGIITPOSYNHQPLKJOIOTHMSYEPRXWQTDPLVPFAUEVBIIFVGJMVLRTMCTOCNGZRTFQZGXGRZCCMRBSSYUZSGWNHJPXGYFXGQJCBIAVCHCOWZTGGUHTPGYZDMQJOHCQUOAGGUHTJGYCCIEVBDTEVOCUFPSFOGVRXYCSCHMKTDHIPZFTWWLFSUPLZRURPHJFQKSAWWTDAYCUCHXGSWHUFVBSYWUZDKWPHDKWLXJLCXITYUTWRBCLZYUERGDHNLQDGRVBTOPHQPHEPCCJWLGHCFLGEOGZRTNCUHDMCUCHMGJCCZKYAPKWLGXZWLAXWJHSADCJYHIPLZFOGSSELGZHDFCCCOUGZSEYTZCCULLFTWWLFSUPACSIUSCHACNGRUFHEJYEYSTGQZEJYRVFUCPZOQLGTCHYPXITJCYHTXGLGIUFVGJHKKCHMGLBROGUHGUUWFXHIMWTFFWITMCOCGUGUZPJGSWRONHGTLGCSAUTHHTHGTCHOPTINVWLBRBKZHTMQIFTYNSCEYTVFTWWLFSYPXITYUBBRBKZHTKWLGXJQYGTLRLZXWWSOKYTLADMCSUDKWLBDMGWITXCVEJYPVVPSCTCHPKZHDYPASAYXPGXIPCSGYOVGSYUUISIUWCQLGTOGAGJCCNGZHDATVSCCPNGTUESOGUTVBSIUYIBITLGFOGTOSIPUOPJCYSRYTPOTHNHGTLKLMTFVLAPXGSOEYNPQJFCNFDYPPBVYZWZXWQHZVOKLBAYRYSVOPACPOPVRTFQZSHWTPHDLGZRTKWLGTNTHHPLKHZPJGSWRONHMSYDYCBUEVBIYUACQUTADTLFLFPMWCWGAKUWSUFHAQIUYIBITLGHIPMOAMQZGDVTLGJWCWWIONVTPPQYWIIOHHIXKQCBYIBGIUOBQWIGSRTZTHBZATPATMEBOAYULGT"

def analizar(cadena):

    f = open("analisis.txt", "w")

    shutil.rmtree("./diagramasDeFrecuencias", ignore_errors=True)
    os.mkdir("diagramasDeFrecuencias")
    carpeta = 0
    

    # Se calcula el método de Kasiski

    mcdTrigrafos, mcdTetragrafos, mcdPentagrafos, mcdHexagrafos, mcdHeptagrafos, mcdOctografos = kasiski(cadena)


    # Se calcula el índice de coincidencia

    ICcriptograma = calculoIC(cadena)
    print("\n\nDe acuerdo al IC, la longitud de la clave es: ", ICcriptograma)
    

    # Utilizamos Kasiski y el índice de coincidencia

    print("\n\nPor Kasiski e Indice de coincidencia")

    if (ICcriptograma == mcdTrigrafos):
        print("\n\nEmpleando la división por Trigrafos: \n")
        carpeta = divisionSubcritogramas(ICcriptograma, cadena, carpeta, f)

    if (ICcriptograma == mcdTetragrafos):
        print("\n\nEmpleando la división por Tetragrafos: \n")
        carpeta = divisionSubcritogramas(ICcriptograma, cadena, carpeta, f)
 
    if (ICcriptograma == mcdPentagrafos):
        print("\n\nEmpleando la división por Pentagrafos: \n")
        carpeta = divisionSubcritogramas(ICcriptograma, cadena, carpeta, f)

    if (ICcriptograma == mcdHexagrafos):
        print("\n\nEmpleando la división por Hexagrafos: \n")
        carpeta = divisionSubcritogramas(ICcriptograma, cadena, carpeta, f)

    if (ICcriptograma == mcdHeptagrafos):
        print("\n\nEmpleando la división por Heptagrafos: \n")
        carpeta = divisionSubcritogramas(ICcriptograma, cadena, carpeta, f)

    if (ICcriptograma == mcdOctografos):
        print("\n\nEmpleando la división por Octografos: \n")
        carpeta = divisionSubcritogramas(ICcriptograma, cadena, carpeta, f)

    
    # Solo por Kasiski

    print("\n\nSolo por Kasiski")
    if (mcdTrigrafos <= 10 and mcdTrigrafos >2):
        print("\n\nPor Trigrafos: \n")
        carpeta = divisionSubcritogramas(mcdTrigrafos, cadena, carpeta, f)

    if (mcdTetragrafos <= 10 and mcdTetragrafos > 2):
        print("\n\nPor Tetragrafos: \n")
        carpeta = divisionSubcritogramas(mcdTetragrafos, cadena, carpeta, f)
 
    if (mcdPentagrafos <= 10 and mcdPentagrafos > 2):
        print("\n\nPor Pentagrafos: \n")
        carpeta = divisionSubcritogramas(mcdPentagrafos, cadena, carpeta, f)

    if (mcdHexagrafos <= 10 and mcdHexagrafos > 2):
        print("\n\nPor Hexagrafos: \n")
        carpeta = divisionSubcritogramas(mcdHexagrafos, cadena, carpeta, f)

    if (mcdHeptagrafos <= 10 and mcdHeptagrafos > 2):
        print("\n\nPor Heptagrafos: \n")
        carpeta = divisionSubcritogramas(mcdHeptagrafos, cadena, carpeta, f)

    if (mcdOctografos <= 10 and mcdOctografos > 2):
        print("\n\nPor Octografos: \n")
        carpeta = divisionSubcritogramas(mcdOctografos, cadena, carpeta, f)


    # Solo por Indice de coincidencia

    print("\n\nSolo por Indice de coincidencia\n")

    carpeta = divisionSubcritogramas(ICcriptograma, cadena, carpeta, f)


    f.close()
